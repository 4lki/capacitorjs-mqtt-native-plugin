{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\n// Define type for the \"onConnectionLost\" event listener\nexport type onConnectionLostListener = (x: {\n  connectionStatus: string;\n  reasonCode: number;\n  message: string;\n}) => void;\n\n// Define type for the \"onConnectComplete\" event listener\nexport type onConnectCompleteListener = (x: {\n  reconnected: boolean;\n  serverURI: string;\n}) => void;\n\n// Define type for the \"onMessageArrived\" event listener\nexport type onMessageArrivedListener = (x: {\n  topic: string;\n  message: string;\n}) => void;\n\n// Define the interface for the MqttBridgePlugin\nexport interface MqttBridgePlugin {\n  // Method to connect to an MQTT broker\n  connect(options: {\n    serverURI: string;\n    port: number;\n    clientId: string;\n    username: string;\n    password: string;\n    setCleanSession: boolean;\n    connectionTimeout: number;\n    keepAliveInterval: number;\n    setAutomaticReconnect: boolean;\n    setLastWill?: {\n      willTopic: string;\n      willPayload: string;\n      willQoS: number;\n      setRetained: boolean;\n    };\n  }): Promise<any>;\n\n  // Method to disconnect from the MQTT broker\n  disconnect(): Promise<any>;\n\n  // Method to subscribe to an MQTT topic\n  subscribe(options: {\n    topic: string;\n    qos: number;\n  }): Promise<{ topic: string; qos: number }>;\n\n  // Method to publish an MQTT message to a topic\n  publish(options: {\n    topic: string;\n    payload: string;\n    qos: number;\n    retained: boolean;\n  }): Promise<{\n    topic: string;\n    payload: string;\n    qos: number;\n    retained: boolean;\n    messageId: any;\n  }>;\n\n  // Method to add an event listener for the \"onConnectionLost\" event\n  addListener(\n    eventName: 'onConnectionLost',\n    listener: onConnectionLostListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  // Method to add an event listener for the \"onConnectComplete\" event\n  addListener(\n    eventName: 'onConnectComplete',\n    listener: onConnectCompleteListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  // Method to add an event listener for the \"onMessageArrived\" event\n  addListener(\n    eventName: 'onMessageArrived',\n    listener: onMessageArrivedListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n"]}